<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-utRappil-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>
	<!-- 定义属性配置文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<!-- 读取配置文件 -->
				<!-- 数据库连接配置，产品只能有一个 -->
				<value>classpath:/database.properties</value>
				<!-- 每个报送模块的单独配置文件，可以配置多个 -->
			</list>
		</property>
	</bean>

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSourceDBCP" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- 数据库连接属性 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 连接池属性 -->
		<!-- 最大空闲连接 -->
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<!-- 最大活动连接 -->
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 每30秒运行一次空闲连接回收器 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 池中的连接空闲30分钟后被回收 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		<!-- 是否要进行检测 -->
 		<property name="testWhileIdle" value="true"/>
		<!-- 进行检测一个连接是有效的SQL语句  -->
        <property name="validationQuery" value="${dbcp.validationSql}"/>
	</bean>

	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<jee:jndi-lookup id="dataSourceJNDI" jndi-name="${dataSource.jndiName}"
		proxy-interface="javax.sql.DataSource" lookup-on-startup="false"
		resource-ref="true" />

	<bean id="BioneDataSource" class="com.yusys.bione.comp.common.BioneDataSource">
		<property name="dataSource">
			<ref bean="${app.dataSource}" />
		</property>
	</bean>

	<!-- 定义 entityManager Factory -->
	<bean id="entityManagerFactory"	class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="BioneDataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.yusys" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
			</props>
		</property>
		<property name="loadTimeWeaver">
			<bean
				class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
	</bean>
	
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="${jpa.showSql}" />
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="com.yusys.bione.comp.utils.DialectUtils">
				<constructor-arg ref="BioneDataSource" />
			</bean>
		</property>
	</bean>

	<bean id="springContextHolder" class="com.yusys.bione.comp.utils.SpringContextHolder" lazy-init="false"></bean>

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.yusys" />

	<!-- Spring Data Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
	<jpa:repositories base-package="com.yusys"	transaction-manager-ref="transactionManager"	entity-manager-factory-ref="entityManagerFactory" />

	<!-- MyBatis配置 -->
	<!-- 支持 Mapper.xml热部署 -->
	<bean id="sqlSessionFactory" class="com.yusys.bione.comp.repository.mybatis.SqlSessionFactoryBeanExt">
		<property name="dataSource" ref="BioneDataSource" />
		<property name="configLocation" value="classpath:/bione-frame/mybatis/Configuration.xml"></property>
		
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:/biapp-input/mybatis/**/*Mapper.xml</value>
				<!--<value>classpath:/biapp-frs/mybatis/**/*Mapper.xml</value>-->
				<value>classpath:/bione-frame/mybatis/**/*Mapper.xml</value>
				<value>classpath:/bione-plugin/mybatis/**/*Mapper.xml</value>
			</list>
	 	</property>
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yusys" />
		<property name="annotationClass" value="com.yusys.bione.comp.repository.mybatis.MyBatisRepository" />
	</bean>

	<!-- jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"	proxy-target-class="true" />
	
	<!-- 自动注入entityManager，保证@PersistenceContext可用 -->
	<bean	class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!--开启这个配置，spring才能识别@Scheduled注解-->  
    <task:annotation-driven/>  
</beans>